@using System.Diagnostics
@rendermode InteractiveServer
@inject IJSRuntime JS

<div class="card" id="@Person?.Id" style="@CardStyle"
     @onmousedown="startMovingPersonCard"
     @onmousemove="movePersonCard"
     @onmouseup="stopMovingPersonCard">
    <div class="card-header">
        <i class="bi bi-person-circle"></i>
    </div>

    <div class="card-body">
        <p class="card-title small">@Person?.Name @Person?.Surname</p>
        @* <p class="card-text small">@Person.Birthdate.ToString("dd/MM/yyyy")</p> *@

    </div>
</div>

@code {


    [Parameter]
    public Person? Person { get; set; } = new Person();

    public double CardX { get; set; } = 500;
    public double CardY { get; set; } = 100;
    public int CardWidth { get; set; }
    public int CardHeight { get; set; }
    public string CardStyle { get; set; } = "";

    public PersonCard()
    {
        styleListTemplate = new List<string>();
    }

    private List<string> styleListTemplate { get; set; }
    private bool canMove { get; set; }
    private IJSObjectReference? personCardJsModule;

    protected async override Task OnInitializedAsync()
    {
        styleListTemplate = new List<string>(){
            "position: absolute;",
            "font-size: 1rem;",
            "width: 5rem;",
            $"top:{CardY}px; left:{CardX}px;"
        };
        CardStyle = ListToLongString(styleListTemplate);


        await base.OnInitializedAsync();
    }


    // ################### PRIVATE ###################
    // ###################

    private string ListToLongString(List<string> styles)
    {
        var result = "";
        foreach (var item in styles)
        {
            result += item;
        }
        return result;
    }

    private void printStyles()
    {
        foreach (var item in CardStyle)
        {
            Console.WriteLine(item);
        }
    }

    private void startMovingPersonCard(MouseEventArgs e)
    {
        canMove = true;
    }

    private void movePersonCard(MouseEventArgs e)
    {
        if(canMove == true)
        {
            this.CardX += e.MovementX;
            this.CardY += e.MovementY;
            this.styleListTemplate.RemoveAt(styleListTemplate.Count - 1);
            this.styleListTemplate.Add($"top:{this.CardY}px; left:{this.CardX}px;");
            CardStyle = ListToLongString(styleListTemplate);
            InvokeAsync(StateHasChanged);
        }
    }

    private void stopMovingPersonCard(MouseEventArgs e)
    {
        canMove = false;
    }
}
