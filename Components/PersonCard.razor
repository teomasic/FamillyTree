@rendermode InteractiveServer

<div class="card" id="@Person.Id" style="@CardStyle" @onmousedown="mouseDownOnCard">

    <div class="card-header">
        <i class="bi bi-person-circle"></i>
    </div>

    <div class="card-body">
        <p class="card-title small">@Person.Name @Person.Surname</p>
        @* <p class="card-text small">@Person.Birthdate.ToString("dd/MM/yyyy")</p> *@

    </div>


</div>

@code {
    [Parameter]
    public Person Person { get; set; }

    public double CardX { get; set; } = 200;
    public double CardY { get; set; } = 300;
    public int CardWidth { get; set; }
    public int CardHeight { get; set; }
    public string CardStyle { get; set; } = "";

    private List<string> styleListTemplate { get; set; }


    protected override Task OnInitializedAsync()
    {
        styleListTemplate = new List<string>(){
            "position: abosulute;",
            "font-size: 1rem;",
            "width: 5rem;",
            $"top:{CardX}px; left:{CardY}px;"
        };
        CardStyle = ListToLongString(styleListTemplate);
        return base.OnInitializedAsync();
    }

    private string ListToLongString(List<string> styles)
    {
        var result = "";
        foreach (var item in styles)
        {
            result += item;
        }
        return result;
    }




    private Task mouseDownOnCard(MouseEventArgs e)
    {
        Console.WriteLine(e.ClientX);
        Console.WriteLine(e.ClientY);
        CardX = e.ClientX;
        CardY = e.ClientY;
        styleListTemplate.RemoveAt(styleListTemplate.Count-1);
        styleListTemplate.Add($"top:{CardX}px; left:{CardY}px;");
        CardStyle = ListToLongString(styleListTemplate);
        InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }
}
