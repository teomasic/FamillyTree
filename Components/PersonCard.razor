@rendermode InteractiveServer
@inject IJSRuntime JS

<div class="card" id="@Person.Id" style="@CardStyle" onmousemove="TrackCoordinates">
    <div class="card-header">
        <i class="bi bi-person-circle"></i>
    </div>

    <div class="card-body">
        <p class="card-title small">@Person.Name @Person.Surname</p>
        @* <p class="card-text small">@Person.Birthdate.ToString("dd/MM/yyyy")</p> *@

    </div>


</div>

@code {

    //todo : add draggable to div and move card on start and at end call InvokeAsync(StateHasChanged);
    // or move card with JS and just inform dotnet of card coords at end of moving card


    [Parameter]
    public Person? Person { get; set; }

    public double CardX { get; set; } = 500;
    public double LastCardX { get; set; } = 200;
    public double CardY { get; set; } = 100;
    public double LastCardY { get; set; } = 300;
    public int CardWidth { get; set; }
    public int CardHeight { get; set; }
    public string CardStyle { get; set; } = "";

    public PersonCard()
    {
        styleListTemplate = new List<string>();
    }

    private List<string> styleListTemplate { get; set; }
    private bool canMove { get; set; }


    protected override Task OnInitializedAsync()
    {
        styleListTemplate = new List<string>(){
            "position: abosulute;",
            "font-size: 1rem;",
            "width: 5rem;",
            $"top:{CardY}px; left:{CardX}px;"
        };
        CardStyle = ListToLongString(styleListTemplate);
        return base.OnInitializedAsync();
    }

    // ################### PRIVATE ###################
    // ################### 

    private string ListToLongString(List<string> styles)
    {
        var result = "";
        foreach (var item in styles)
        {
            result += item;
        }
        return result;
    }

    private void printStyles()
    {
        foreach (var item in CardStyle)
        {
            Console.WriteLine(item);
        }
    }

}
